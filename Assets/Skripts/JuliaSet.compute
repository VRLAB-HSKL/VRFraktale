// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct data
{
    double w, h, r, i;
    int screenWidth, screenHeight;
};
StructuredBuffer<data> buffer;
uint iterations;
float real1, imag1;

[numthreads(24,24,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	double real2 = (double)real1;
	double imag2 = (double)imag1;
    double real, imag;
    double xAdjust = (double)id.x / buffer[0].screenWidth * buffer[0].w;
    double yAdjust = (double)id.y / buffer[0].screenHeight * buffer[0].h;

    uint iterationCount;

    float4 CalcColor = { 0.0f, 0.0f, 0.0f, 1.0f };
    real = buffer[0].r + xAdjust;
    imag = buffer[0].i + yAdjust;

	for (uint i = 0; i < iterations; i++)
	{
		double x = (real * real - imag * imag) + real2;
		double y = (imag * real + real * imag) + imag2;

		if ((x * x + y * y) > 4.0) {
			break;
		}
		else {
			real = x;
			imag = y;
			iterationCount++;
		}
		/*real2 = real * real;
		imag2 = imag * imag;

		if (real2 + imag2 > 4.0)
		{
			break;
		}
		else {
			imag = (2.0 * real * imag + buffer[0].i + yAdjust);
			real = (real2 - imag2 + buffer[0].r + xAdjust);
			iterationCount++;
		}
		*/
	}
	if (iterationCount != iterations)
	{
		int colorNr = iterationCount % 16;

		switch (colorNr)
		{
		case 0:
		{
			CalcColor[0] = 66.0f / 255.0f;
			CalcColor[1] = 30.0f / 255.0f;
			CalcColor[2] = 15.0f / 255.0f;

			break;
		}
		case 1:
		{
			CalcColor[0] = 25.0f / 255.0f;
			CalcColor[1] = 7.0f / 255.0f;
			CalcColor[2] = 26.0f / 255.0f;
			break;
		}
		case 2:
		{
			CalcColor[0] = 9.0f / 255.0f;
			CalcColor[1] = 1.0f / 255.0f;
			CalcColor[2] = 47.0f / 255.0f;
			break;
		}

		case 3:
		{
			CalcColor[0] = 4.0f / 255.0f;
			CalcColor[1] = 4.0f / 255.0f;
			CalcColor[2] = 73.0f / 255.0f;
			break;
		}
		case 4:
		{
			CalcColor[0] = 0.0f / 255.0f;
			CalcColor[1] = 7.0f / 255.0f;
			CalcColor[2] = 100.0f / 255.0f;
			break;
		}
		case 5:
		{
			CalcColor[0] = 12.0f / 255.0f;
			CalcColor[1] = 44.0f / 255.0f;
			CalcColor[2] = 138.0f / 255.0f;
			break;
		}
		case 6:
		{
			CalcColor[0] = 24.0f / 255.0f;
			CalcColor[1] = 82.0f / 255.0f;
			CalcColor[2] = 177.0f / 255.0f;
			break;
		}
		case 7:
		{
			CalcColor[0] = 57.0f / 255.0f;
			CalcColor[1] = 125.0f / 255.0f;
			CalcColor[2] = 209.0f / 255.0f;
			break;
		}
		case 8:
		{
			CalcColor[0] = 134.0f / 255.0f;
			CalcColor[1] = 181.0f / 255.0f;
			CalcColor[2] = 229.0f / 255.0f;
			break;
		}
		case 9:
		{
			CalcColor[0] = 211.0f / 255.0f;
			CalcColor[1] = 236.0f / 255.0f;
			CalcColor[2] = 248.0f / 255.0f;
			break;
		}
		case 10:
		{
			CalcColor[0] = 241.0f / 255.0f;
			CalcColor[1] = 233.0f / 255.0f;
			CalcColor[2] = 191.0f / 255.0f;
			break;
		}
		case 11:
		{
			CalcColor[0] = 248.0f / 255.0f;
			CalcColor[1] = 201.0f / 255.0f;
			CalcColor[2] = 95.0f / 255.0f;
			break;
		}
		case 12:
		{
			CalcColor[0] = 255.0f / 255.0f;
			CalcColor[1] = 170.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 13:
		{
			CalcColor[0] = 204.0f / 255.0f;
			CalcColor[1] = 128.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 14:
		{
			CalcColor[0] = 153.0f / 255.0f;
			CalcColor[1] = 87.0f / 255.0f;
			CalcColor[2] = 0.0f / 255.0f;
			break;
		}
		case 15:
		{
			CalcColor[0] = 106.0f / 255.0f;
			CalcColor[1] = 52.0f / 255.0f;
			CalcColor[2] = 3.0f / 255.0f;
			break;
		}
		}
	}


    Result[id.xy] = CalcColor;
}
